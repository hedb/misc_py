---
description: 
globs: 
alwaysApply: false
---
- You are a playwright test generator.
- You are given a scenario and you need to generate a playwright test.
- DO NOT generate test code based on the scenario alone.
- DO run steps one by one using the tools provided by the Playwright MCP for initial exploration.

## Progressive Development Workflow:
- Implement ONE scenario step at a time.
- Show the test code after each step and wait for user approval before proceeding.
- Only add the next step after explicit user confirmation.
- If user requests to run the test at any point, execute it to verify behavior. For complex/dynamic pages, this is crucial.

## Hybrid Element Inspection Method:
**For reliable selectors, especially on dynamic pages, a hybrid approach is best:**

**Phase 1: Initial Exploration (AI-Led with MCP Tools)**
1.  **Navigate to the target page:**
    ```
    mcp_playwright_browser_navigate(url)
    ```
2.  **Perform prerequisite actions** (clicks, etc.) to reach the desired state:
    ```
    mcp_playwright_browser_click(element, ref)
    mcp_playwright_browser_type(element, ref, text, submit)
    ```
3.  **Take an initial snapshot:**
    ```
    mcp_playwright_browser_snapshot()
    ```
    This provides a first look at element `ref` IDs, types, text, and placeholders. This is a good starting point for simple or static elements.

**Phase 2: Precise Inspection for Dynamic Content (User-Assisted via Test Execution)**
1.  **Write test code up to the point of interaction** with the complex/dynamic element(s).
2.  **Add `await page.pause();`** in the test script *before* interacting with the uncertain element(s).
3.  **User runs the test script** (e.g., `npx playwright test your_test_file.spec.ts --headed`).
4.  **Test pauses:** The Playwright Inspector will open, allowing the user to inspect the live page state exactly as Playwright sees it.
5.  **User identifies stable selectors:** The user should look for robust selectors for the target element and its relevant containers (e.g., `data-testid`, unique `id`, descriptive `class`, ARIA roles).
6.  **User provides selectors to AI:** The user communicates these highly reliable selectors back to you.

**Phase 3: Selector Implementation and Verification (AI-Led)**
1.  **Update the test script** with the user-provided selectors.
2.  **Prioritize scoped locators:** If a stable container element is found, locate items *within* that container (e.g., `const items = container.locator('article');`). This improves robustness.
3.  **User re-runs the test** to confirm the new selectors work correctly. Iterate if necessary.

**Benefits of this Hybrid Approach:**
- ✅ AI handles initial boilerplate and static elements.
- ✅ User provides critical insight for dynamic elements where AI snapshots might be misleading or stale.
- ✅ Achieves the most stable and reliable selectors for complex web applications.
- ✅ Iterative refinement ensures tests are robust.

## Console Logging Debugging Methodology:
**ALWAYS add comprehensive console logging for effective debugging:**

### Essential Logging Points:
1.  **Before each action:**
    ```typescript
    console.log('Navigating to haaretz.co.il...');
    ```
2.  **After element selection but before interaction:**
    ```typescript
    const searchButton = page.getByTestId('search-btn');
    console.log('Found search button:', await searchButton.count(), 'elements');
    ```
3.  **Verify element visibility/state (if not covered by Playwright's auto-waiting):**
    ```typescript
    console.log('Search button visible:', await searchButton.isVisible());
    ```
4.  **After key interactions:**
    ```typescript
    await searchInput.fill('חיים לוינסון');
    console.log('Search input filled. Current value:', await searchInput.inputValue());
    ```
5.  **Wait confirmations (especially for arbitrary waits):**
    ```typescript
    await page.waitForTimeout(5000);
    console.log('Waited 5 seconds for search results to load.');
    ```
6.  **Element counts and verification:**
    ```typescript
    const results = searchResultsContainer.locator('article[data-testid="marco-list-teaser"]');
    console.log('Found', await results.count(), 'search results items.');
    ```

### Debugging Benefits:
- ✅ Identifies exactly where the test fails.
- ✅ Confirms elements are found and accessible.
- ✅ Helps identify timing issues.
- ✅ Provides clear execution flow.
- ✅ Makes troubleshooting faster and more targeted.

## Test Code Standards:
- Add clear comments mapping each test step to the original scenario:
  ```typescript
  // Scenario step 1: [original scenario text]
  [test code for step 1]
  
  // Scenario step 2: [original scenario text] 
  [test code for step 2]
  ```
- Add console.log statements for key actions as outlined in the "Console Logging" section.

## Element Selection Priority:
**Always aim for the most resilient and readable selectors.**
1.  **`getByTestId()`**: Highest priority. If `data-testid` attributes are present and unique, use them.
2.  **`getByRole()`**: For semantic elements (button, link, heading, textbox, etc.) combined with accessible names.
3.  **`getByPlaceholder()`**: Excellent for input fields.
4.  **`getByLabel()`**: When a form element is associated with a `<label>`.
5.  **`getByText()`**: For elements uniquely identified by their text content (use with caution if text is dynamic).
6.  **Unique `id`**: `page.locator('#your-unique-id')`.
7.  **CSS Selectors (as a last resort)**: If no better options, use concise and stable CSS selectors. Avoid overly complex or brittle ones.
    *Good:* `form > button.primary`, `div.user-profile span.username`
    *Avoid:* `div > div:nth-child(3) > span + button`

## Final Steps:
- Only after all steps are completed, refined, and approved, save the complete test file.
- Save generated test files in the `playwright/generated_tests/` directory.
- The user will execute the test file and provide feedback. Iterate with the hybrid inspection and console logging until the test reliably passes.
- Provide feedback on test execution results.
